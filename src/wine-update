#!/bin/sh

repo="https://dl.winehq.org/wine-builds/debian/pool/main/"
dir="/opt/"
release=$(lsb_release -cs)

. /usr/local/lib/wine_helper/wine_helper_global.shlib
[ -f $conf ] && . $conf

wine_ver_get=$(ls $dir | sort --version-sort | sed '/wine/!d;$!d') # get the lasted version of wine in dir, e.g. wine_1.8.0
wine_path=$dir$wine_ver_get"/bin/"

fetchMachine()
{
	local mach=$(uname -m)
	if [ "$mach" = "armv6l" ] || [ "$mach" = "armv7l" ] || [ "$mach" = "ppc" ] || [ "$mach" = "ppc64" ] || [ "$mach" = "mips" ] || [ "$mach" = "sparc64" ]; then
		echo "arm\ppc\mips\sparc machines are not supporting. Please, use your distribution repository or build wine for yourself."
		exit 1
	fi
}

fetchSystem()
{	
	local sys=$(uname -s)
	
	if [ $sys = "GNU" ]; then
		echo "Hurd is not supported."
		exit 1
	elif [ $sys = "SunOS" ]; then
		echo "Solaris\OpenIndiana\SmartOS is not supported."
		exit 1
	fi
	
	echo $sys | awk '{print tolower($0)}'
}

# https://www.playonlinux.com/wine/binaries/
# both 32x and 64x
getPOLWine()
{
		if [ -z "$1" ] || [ -z "$1" ]; then
			echo "Error getting Play On Linux wine binaries. First or second parametrs is empty. Must be: $0 wine-1.5.26 [amd64]"
		fi
	
		GET="https://www.playonlinux.com/wine/binaries/linux-"$1"/"PlayOnLinux-$2-linux-$1".pol"
		wget -qO - $GET > /tmp/wine.tar.gz
		cd /tmp
		tar xvf wine.tar.gz
		rm -rf playonlinux
		rm -rf files
		ver=$(ls wineversion)
		mv wineversion/* /opt/wine_$ver
}

# https://dl.winehq.org/wine-builds/debian/pool/main/
getStagingWine()
{
	if [ ! $(which sudo) ] && [ $(ls -ld $dir | cut -d ' ' -f3)!=$(whoami) ]; then
		echo "Error: $dir allow write root only users and you don't have [sudo] installed in your system. Please, change destanation folder."
		exit 0
	fi
	
	echo "================================"
	echo "Downloading lastes wine-staging"
	echo "================================"
	echo "\n"
	echo "Downloading and parsing page..."
	
	#black magic starts here
	dev=$(echo $development | sed 's/\./\\./g') #workaround grep can't filter someting with dot symbol
	removeTrash=`html2text -nobs /tmp/wine-staging.html | grep "$dev" | sed '/wine-staging/!d;/'$release'/!d;/dbg/d;/dev/d;/compat/d' | cut -d " " -f 8`
	
	wineVersionAmd64=$(echo $removeTrash | cut -d " " -f 3)
	wineVersionAmd64Libs=$(echo $removeTrash | cut -d " " -f 1)
	wineVersioni386=$(echo $removeTrash | cut -d " " -f 4)
	wineVersioni386Libs=$(echo $removeTrash | cut -d " " -f 2)
	
	echo "Done!\nDonwloading and unpaking wine..."
	
	tmp_dir="/tmp/wine-staging/"
	mkdir $tmp_dir
	
	if [ "$(uname -m)" = "x86_64" ] || [ "$(uname -m)" = "k1om" ]; then
		echo "Script detected, that your system is amd64, so downloading 64bit wine."
		echo "Downloading and extracting wine..."
		# getting wine itself
		touch $tmp_dir$wineVersionAmd64
		wget -qO - $repo$wineVersionAmd64 > $tmp_dir$wineVersionAmd64
		dpkg -x $tmp_dir$wineVersionAmd64 $tmp_dir
		
		echo "Downloading and extracting libs..."	
		touch $tmp_dir$wineVersionAmd64Libs
		touch $tmp_dir$wineVersioni386Libs
		
		wget -qO - $repo$wineVersioni386Libs > $tmp_dir$wineVersionAmd64Libs
		wget -qO - $repo$wineVersionAmd64Libs > $tmp_dir$wineVersioni386Libs
		
		dpkg -x $tmp_dir$wineVersionAmd64Libs $tmp_dir
		dpkg -x $tmp_dir$wineVersioni386Libs $tmp_dir
	else
		echo "Script detected, that your system is i386, so downloading 32bit wine."
		echo "Downloading wine..."
		touch $tmp_dir$wineVersioni386
		wget -qO - $repo$wineVersioni386 > $tmp_dir$wineVersioni386
		dpkg -x $dir$wineVersioni386 $tmp_dir
		
		echo "Downloading libs..."
		touch $tmp_dir$wineVersioni386Libs
		wget -qO - $repo$wineVersioni386Libs > $tmp_dir$wineVersioni386Libs
		dpkg -x $tmp_dir$wineVersioni386Libs $tmp_dir
	fi
	
	echo "Removing temporary data..."
	echo "Now script ask for su password (using sudo):"
	sleep 1
	sudo mv $tmp_dir"opt/wine-staging" "/opt/wine_"$development
	
	rm -rf "/tmp/wine-staging"
	echo "All done! Your wine version now is $v."
}

askStagingWine()
{
	# get wine-hq page to get current wine versions
	wget -qO - $repo > /tmp/wine-staging.html
	development=$(html2text -nobs /tmp/wine-staging.html | awk '/wine-staging/ && /'$release'/ {print $2}' | sed 's/[a-Z]*[-_~]//g;s/i386.deb//g;$!d')
 
	if [ "wine_$development" = "$wine_ver_get" ]; then
		echo "You have lastes wine staging version at this moment: $development"
		rm /tmp/wine-staging.html
		exit 0
	else
		if ask 'New version ('$development') are avalable! Do you want to download it?'; then
			getStagingWine
		fi
	fi
}

fetchMachine

if [ "$1" = "staging" ]; then
	askStagingWine
elif [ "$1" = "pol" ]; then
	die
	getPOLWine "$2" "$3"
else
	fetchSystem
	#askStagingWine
fi

[ -f "/tmp/wine-staging.html" ] && rm /tmp/wine-staging.html
