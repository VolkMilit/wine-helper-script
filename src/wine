#!/bin/sh

. /usr/local/lib/wine_helper/wine_helper_global.shlib
. $conf

RESOLUTION="$(xrandr -q | awk -F'current' -F',' 'NR==1 {gsub("( |current)","");print $2}')" # some fun staff from Kron

wine_ver_get=$(ls $dir | sort -n | sed '/wine/!d;$!d') # get the lasted version of wine in dir, e.g. wine_1.8.0
wine_path=$dir/$wine_ver_get/bin

if [ "$1" = "-v" ]; then
	echo "WINE helper version is $VER"
	exit 0
elif [ "$1" = "-h" ]; then
	help
	exit 0
elif [ "$1" = "--check-wine-version" ]; then
	wine-update
	exit 0
fi

for i in "$@"; do
	case $i in
		-wvs=*|--wine-ver-set=*)
		wine_path=$dir"wine_${i#*=}/bin"
		shift
		;;
		
		-p=*|--prefix=*)
		WINEPREFIX=$wine_prefixes_dir/"${i#*=}"
		shift
		;;
		
		-a=*|--arch=*)
		ARCH="${i#*=}"
		shift
		;;
		
		-k|--kill)
		WINEPREFIX=$WINEPREFIX $wine_path/wineserver -k
		shift
		;;
		
		-wc|--use-write-copy-varible)
		wc=1
		shift
		;;
		
		-sm|--use-shared-memory-varible)
		sm=1
		shift
		;;
		
		-d|-debug)
		WINEDEBUG=-all
		shift
		;;
		
		-desktop)
		desktop=$RESOLUTION
		shift
		;;
		
		-desktop=*)
		desktop="${i#*=}"
		shift
		;;
		
		-noinet)
		shift
		;;
		
		-fps)
		checkfps=1
		shift
		;;
		
		-csmt=*)
		csmt="${i#*=}"
		shift
		;;
	esac
done

if [ ! -z "$checkfps" ]; then
	if [ "$checkfps" = "1" ]; then
		if [ -z $(which glxosd) ]; then
			echo "You need to install GLXOSD package or build it by yourself."
			fps=""
		else
			fps="glxosd"
		fi
	fi
fi

if [ ! -z "$desktop" ]; then
	explorer="explorer /desktop=$(sed -i 's/.exe//g' $exe),$desktop"
fi

#if [ ! -z "$csmt" ]; then
	
	
	#if [ "$csmt" = "0" ]; then
	#else
	#fi
#fi

[ -z "$WINEPREFIX" ] && WINEPREFIX=$wine_prefixes_dir$default_prefix
[ -z "$sm" ] && sm=0
[ -z "$wc" ] && wc=0

prefix=$(awk -F "=" '/#arch/ {print $2}' $WINEPREFIX/user.reg)

if [ ! -z "$ARCH" ] || [ "$prefix" = "win32" ]; then
	ww="wine"
else
	ww="wine64"
fi

export STAGING_SHARED_MEMORY=$sm
export STAGING_WRITE_COPY=$wc 
export WINEPREFIX=$WINEPREFIX
export ARCH=$ARCH
export WINEDEBUG=$WINEDEBUG

if [ -z "$WINEDEBUG" ]; then
	if [ "$ww" = "wine" ]; then
		echo "Use 32-bit wine binary"; 
	else 
		echo "Use 64-bit wine binary"; 
	fi
	
	echo "Use \"$runtime\" command to provide runtime"
	echo "Warning, missing libs are: " $($runtime $wine_path/$ww --check-libs | awk '/missing/ {gsub(":",""); print $1}')
fi

if [ "$sandboxing" = "true" ]; then
	WINEPREFIX=$WINEPREFIX $runtime $wine_path/$ww wineboot
	WINEPREFIX=$WINEPREFIX wine-tools -s
fi

wine_ver=$(echo $wine_path | awk -F'wine_' '{gsub("/bin",""); print $2}')
echo "Running wine verion $wine_ver"

$runtime $fps $wine_path/$ww $explorer $@

CURRENT_RESOLUTION="$(xrandr -q | awk -F'current' -F',' 'NR==1 {gsub("( |current)","");print $2}')"
xrandr -s $RESOLUTION
