#!/bin/sh

. ./libs/wine_helper_global.shlib

runtime="$HOME/.steam/runtime/run.sh"
RESOLUTION="$(xrandr -q | awk -F'current' -F',' 'NR==1 {gsub("( |current)","");print $2}')" # some fun staff from Kron
dir="/opt/"
default_prefix=".wine64"
wine_prefixes_dir="$HOME/.local/share/wine_prefix/"

[ -f $conf ] && . $conf

wine_ver_get=`ls $dir | sort --version-sort | sed '/wine/!d;$!d'` # get the lasted version of wine in dir, e.g. wine_1.8.0
#wine_ver_get=`ls -d1 /opt/wine*`
wine_path=$dir$wine_ver_get"/bin/"

deleteWineAssociations()
{
	rm $HOME/.local/share/applications/wine-extension*
	sed -i '/FileOpenAssociations/d;/AppName/d;/DesktopFile/d;/Associations/d;/MimeType/d;/OpenWithIcon/d;/ProgID/d' $WINEPREFIX/user.reg
}

if [ "$1" = "-v" ]; then
	echo "WINE helper version is $VER"
	exit 0
elif [ "$1" = "-h" ]; then
	help
	exit 0
elif [ "$1" = "--check-wine-version" ]; then
	wine-update
	exit 0
elif [ "$1" = "--set-shortcut" ]; then
	wine-shortcut $@
	exit 0
elif [ "$1" = "--delete-junk-associations" ]; then
	deleteWineAssociations
	exit 0
fi

for i in "$@"; do
	case $i in
		-wvs=*|--wine-ver-set=*)
		wine_path=$dir"wine_${i#*=}/bin/"
		shift
		;;
		
		-np|--new-prefix)
		WINEPREFIX=$WINEPREFIX $wine_path$ww wineboot
		shift
		;;
		
		-p=*|--prefix=*)
		WINEPREFIX=$wine_prefixes_dir"${i#*=}"
		shift
		;;
		
		-a=*|--arch=*)
		ARCH="${i#*=}"
		shift
		;;
		
		-k|--kill)
		WINEPREFIX=$WINEPREFIX ${wine_path}wineserver -k
		shift
		;;
		
		-wc|--use-write-copy-varible)
		wc=1
		shift
		;;
		
		-sm|--use-shared-memory-varible)
		sm=1
		shift
		;;
		
		*)
		#help
		#exit 0
		;;
	esac
done

[ -z "$WINEPREFIX" ] && WINEPREFIX=$wine_prefixes_dir$default_prefix
[ -z $sm ] && sm=0
[ -z $wc ] && wc=0

prefix=`awk -F "=" '/#arch/ {print $2}' $WINEPREFIX/user.reg`

if [ ! -z "$ARCH" ] || [ "$prefix" = "win32" ]; then
	ww="wine"
else
	ww="wine64"
fi

if [ -z "$WINEDEBUG" ]; then
	if [ "$ww" = "wine64" ]; then 
		echo "Use 32-bit wine binary"; 
	else 
		echo "Use 64-bit wine binary"; 
	fi
	
	if [ -z $NORUNTIME ]; then RUNTIME=$runtime; echo "Use \"$RUNTIME\" command to provide runtime"; fi
	echo "Warning, missing libs are: " $(wine --check-libs | awk '/missing/ {gsub(":",""); print $1}')
fi

wine_ver=`echo $wine_path | sed 's/[\/_optwineb]//g'`
echo "Running wine verion $wine_ver" 
STAGING_SHARED_MEMORY=$sm STAGING_WRITE_COPY=$wc WINEPREFIX=$WINEPREFIX $RUNTIME $wine_path$ww $1 \
&& CURRENT_RESOLUTION="$(xrandr -q | awk -F'current' -F',' 'NR==1 {gsub("( |current)","");print $2}')" \
&& if [ "$CURRENT_RESOLUTION" != "$RESOLUTION" ]; then  xrandr -s $RESOLUTION; fi
